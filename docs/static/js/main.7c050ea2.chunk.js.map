{"version":3,"sources":["components/home/NothingSelected.tsx","helpers/pokemonTypeColor.ts","components/home/PokemonItem.tsx","components/home/HomeScreen.tsx","types/types.ts","actions/ui.ts","actions/pokemons.ts","components/shared/TypeButton.tsx","components/shared/Sidebar.tsx","components/shared/SearchModal.tsx","components/shared/Appbar.tsx","routes/AppRoute.tsx","reducers/uiReducer.ts","reducers/pokemonTypesReducer.ts","reducers/pokemonTypeSelectedReducer.ts","reducers/pokemonReducer.ts","store/store.tsx","PokeApp.tsx","index.tsx"],"names":["NothingSelected","pokemonTypesColor","name","color","PokemonItem","pokemon","image","sprites","other","front_default","typeStyle","find","p","className","style","zIndex","position","fontSize","id","weight","height","src","alt","width","upFirstLetter","types","map","type","index","key","value","charAt","toUpperCase","slice","HomeScreen","pokemons","useSelector","state","length","poke","setError","err","payload","setTypesOfPokemons","pokemonTypes","setPokemonsByType","TypeButton","buttonStyle","textStyle","pt","selected","dispatch","useDispatch","backgroundColor","onClick","pokemonType","a","Axios","get","url","pokemonPartial","data","pokemonsPromise","filter","pp","Promise","all","axiosResponse","response","console","error","toString","disabled","Sidebar","pokemonTypeSelected","SearchModal","setToggle","e","stopPropagation","icon","faSearch","size","autoComplete","placeholder","autoFocus","Appbar","useState","toggle","AppRoute","ui","useEffect","baseUrl","loading","exact","path","component","initialState","msgError","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","reducers","combineReducers","action","results","store","createStore","applyMiddleware","thunk","PokeApp","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7c050ea2.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport const NothingSelected = () => {\r\n    return (\r\n        <div>\r\n            <h1>No se ha seleccionado nada</h1>\r\n        </div>\r\n    )\r\n}\r\n","export const pokemonTypesColor = [\r\n    { name: 'normal', color: '#A8A878' },\r\n    { name: 'fighting', color: '#C03028' },\r\n    { name: 'flying', color: '#A890F0' },\r\n    { name: 'poison', color: '#A040A0' },\r\n    { name: 'ground', color: '#927D44' },\r\n    { name: 'rock', color: '#B8A038' },\r\n    { name: 'bug', color: '#A8B820' },\r\n    { name: 'ghost', color: '#705898' },\r\n    { name: 'steel', color: '#B8B8D0' },\r\n    { name: 'fire', color: '#F5AC78' },\r\n    { name: 'water', color: '#6890F0' },\r\n    { name: 'grass', color: '#78C850' },\r\n    { name: 'electric', color: '#F8D030' },\r\n    { name: 'psychic', color: '#F85888' },\r\n    { name: 'ice', color: '#98D8D8' },\r\n    { name: 'dragon', color: '#7038F8' },\r\n    { name: 'dark', color: '#705848' },\r\n    { name: 'fairy', color: '#EE99AC' },\r\n    { name: 'unknown', color: '#C92112' },\r\n    { name: 'shadow', color: '#4F5870' },\r\n];\r\n","import React, { Fragment } from 'react';\r\nimport { IPokemon } from '../../interfaces/ipokemon';\r\nimport { pokemonTypesColor } from '../../helpers/pokemonTypeColor';\r\n\r\ninterface IPokemonItemProps {\r\n    pokemon: IPokemon;\r\n}\r\n\r\nexport const PokemonItem = ({ pokemon }: IPokemonItemProps) => {\r\n    const image =\r\n        pokemon.sprites.other?.['official-artwork'].front_default || '';\r\n\r\n    const typeStyle = (name: string): React.CSSProperties => ({\r\n        color: pokemonTypesColor.find((p) => p.name === name)?.color || 'red',\r\n    });\r\n\r\n    return (\r\n        <div className='flex w-full justify-between flex-row py-10 px-5'>\r\n            <div className='flex-auto flex justify-center'>\r\n                <div>\r\n                    <div className='h-auto w-64 shadow-md rounded-md flex flex-col items-center p-4 relative'>\r\n                        <div\r\n                            style={{\r\n                                zIndex: -10,\r\n                                position: 'absolute',\r\n                                fontSize: '4.5rem',\r\n                            }}\r\n                            className='font-extrabold text-gray-400'\r\n                        >\r\n                            <p>#{pokemon.id}</p>\r\n                        </div>\r\n                        <div className='absolute rounded-full bg-white h-10 w-10 right-0 top-0 font-sans font-bold flex justify-center items-center'>\r\n                            <p className='text-xs'>{pokemon.weight / 10}Kg</p>\r\n                        </div>\r\n                        <div className='absolute rounded-full bg-white h-10 w-10 left-0 top-0 font-sans font-bold flex justify-center items-center'>\r\n                            <p className='text-xs'>{pokemon.height / 10}m</p>\r\n                        </div>\r\n                        <img src={image} alt={pokemon.name} width={90} />\r\n                        <h3 className='text-xl font-sans font-bold'>\r\n                            {upFirstLetter(pokemon.name)}\r\n                        </h3>\r\n                        <h5>\r\n                            {pokemon.types.map((type, index) => {\r\n                                return (\r\n                                    <Fragment key={type.type.name}>\r\n                                        {index > 0 && (\r\n                                            <span>\r\n                                                <b>·</b>\r\n                                            </span>\r\n                                        )}\r\n                                        <span\r\n                                            className='text-sm font-bold'\r\n                                            style={typeStyle(type.type.name)}\r\n                                        >\r\n                                            {' ' +\r\n                                                upFirstLetter(type.type.name) +\r\n                                                ' '}\r\n                                        </span>\r\n                                    </Fragment>\r\n                                );\r\n                            })}\r\n                        </h5>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className='flex-auto flex justify-center'></div>\r\n        </div>\r\n    );\r\n};\r\n\r\nfunction upFirstLetter(value: string) {\r\n    return value.charAt(0).toUpperCase() + value.slice(1);\r\n}\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { IPokemonState } from '../../reducers/pokemonReducer';\r\nimport { NothingSelected } from './NothingSelected';\r\nimport { PokemonItem } from './PokemonItem';\r\n\r\nexport const HomeScreen = () => {\r\n    const { pokemons } = useSelector<{ pokemon: IPokemonState }, IPokemonState>(\r\n        (state) => state.pokemon\r\n    );\r\n    if (pokemons.length === 0) return <NothingSelected />;\r\n\r\n    return (\r\n        <div className='w-full h-full overflow-y-auto'>\r\n            <ul>\r\n                {pokemons.map((poke) => (\r\n                    <PokemonItem key={poke.id} pokemon={poke} />\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n","export const types = {\r\n    //Global [UI] loading and error\r\n    uiStartLoading: '[UI] Start loading',\r\n    uiFinishLoading: '[UI] Finish loading',\r\n    uiSetError: '[UI] Set Error',\r\n    uiRemoveError: '[UI] Remove Error',\r\n    //Pokemon Selected type\r\n    pokemonSelectedType: \"[Pokemon] Selected type\",\r\n    //Pokemons generals, Gets of data\r\n    pokemonGetById: '[Pokemon] Get By ID',\r\n    pokemonGetByName: '[Pokemon] Get By Name',\r\n    pokemonGetByType: '[Pokemon] Get By Type',\r\n    pokemonGetTypes: '[Pokemon] Get Types',\r\n    pokemonGetAll: '[Pokemon] Get All',\r\n};\r\n","import { types } from '../types/types';\r\nimport { Action } from '../interfaces/action';\r\n\r\nexport const setError = (err: string): Action<string> => ({\r\n    type: types.uiSetError,\r\n    payload: err,\r\n});\r\n\r\nexport const removeError = (): Action<any> => ({\r\n    type: types.uiRemoveError,\r\n    payload: null,\r\n});\r\n\r\nexport const startLoading = (): Action<any> => ({\r\n    type: types.uiStartLoading,\r\n    payload: null,\r\n});\r\n\r\nexport const finishLoading = (): Action<any> => ({\r\n    type: types.uiFinishLoading,\r\n    payload: null,\r\n});\r\n","import { Dispatch } from 'redux';\r\nimport Axios from 'axios';\r\nimport { startLoading, finishLoading, setError } from './ui';\r\nimport { IPokemonTypes, IPokemonTypesResult } from '../interfaces/pokemonTypes';\r\nimport { types } from '../types/types';\r\nimport { Action } from '../interfaces/action';\r\nimport { IPokemonType } from '../interfaces/pokemonType';\r\nimport { IPokemon } from '../interfaces/ipokemon';\r\n\r\nconst baseUrl = 'https://pokeapi.co/api/v2';\r\n\r\nexport const getTypesOfPokemons = () => {\r\n    return async (dispatch: Dispatch) => {\r\n        try {\r\n            dispatch(startLoading());\r\n            const { data } = await Axios.get<IPokemonTypes>(baseUrl + '/type');\r\n\r\n            dispatch(setTypesOfPokemons(data));\r\n        } catch (error) {\r\n            console.error(error);\r\n            dispatch(setError(error.toString()));\r\n        } finally {\r\n            dispatch(finishLoading());\r\n        }\r\n    };\r\n};\r\n\r\nexport const setTypesOfPokemons = (\r\n    pokemonTypes: IPokemonTypes\r\n): Action<IPokemonTypes> => ({\r\n    type: types.pokemonGetTypes,\r\n    payload: pokemonTypes,\r\n});\r\n\r\nexport const setSelectedPokemonType = (\r\n    pokemonTypeSelected: IPokemonTypesResult\r\n): Action<IPokemonTypesResult> => ({\r\n    type: types.pokemonSelectedType,\r\n    payload: pokemonTypeSelected,\r\n});\r\n\r\nexport const getPokemonsByType = (pokemonType: IPokemonTypesResult) => {\r\n    return async (dispatch: Dispatch) => {\r\n        try {\r\n            const { data: pokemonPartial } = await Axios.get<IPokemonType>(\r\n                pokemonType.url\r\n            );\r\n            const pokemonsPromise = pokemonPartial.pokemon\r\n                .filter((pp, index) => index < 15)\r\n                .map((pp) => Axios.get<IPokemon>(pp.pokemon.url));\r\n\r\n            const axiosResponse = await Promise.all(pokemonsPromise);\r\n            const pokemons = axiosResponse.map((response) => response.data);\r\n\r\n            dispatch(setPokemonsByType(pokemons));\r\n\r\n        } catch (error) {\r\n            console.error(error);\r\n            dispatch(setError(error.toString()));\r\n        } finally {\r\n\r\n        }\r\n    };\r\n};\r\n\r\nexport const setPokemonsByType = (\r\n    pokemons: IPokemon[]\r\n): Action<IPokemon[]> => ({\r\n    type: types.pokemonGetByType,\r\n    payload: pokemons,\r\n});\r\n","import React from 'react';\r\nimport { IPokemonTypesResult } from '../../interfaces/pokemonTypes';\r\nimport { useDispatch } from 'react-redux';\r\nimport { setSelectedPokemonType, getPokemonsByType } from '../../actions/pokemons';\r\n\r\ninterface Props {\r\n    pt: IPokemonTypesResult;\r\n    selected: boolean;\r\n    color: string;\r\n}\r\n\r\nexport const TypeButton = ({ pt, selected, color }: Props) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClick = () => {\r\n        dispatch(setSelectedPokemonType(pt));\r\n        dispatch(getPokemonsByType(pt));\r\n    };\r\n\r\n    let buttonStyle: React.CSSProperties;\r\n    let textStyle: React.CSSProperties;\r\n\r\n    if (selected) {\r\n        buttonStyle = {\r\n            backgroundColor: color,\r\n        };\r\n        textStyle = {\r\n            color: 'white',\r\n        };\r\n    } else {\r\n        buttonStyle = {\r\n            backgroundColor: 'white',\r\n        };\r\n        textStyle = {\r\n            color: color,\r\n        };\r\n    }\r\n\r\n    return (\r\n        <button\r\n            onClick={handleClick}\r\n            style={buttonStyle}\r\n            type='button'\r\n            disabled={selected}\r\n            className='btn py-2 w-full my-3 font-bold focus:outline-none rounded-md'\r\n        >\r\n            <p style={textStyle}>{pt.name.toUpperCase()}</p>\r\n        </button>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { PokemonTypeState } from '../../reducers/pokemonTypesReducer';\r\nimport { TypeButton } from './TypeButton';\r\nimport { PokemonTypeSelectedState } from '../../reducers/pokemonTypeSelectedReducer';\r\nimport { pokemonTypesColor } from '../../helpers/pokemonTypeColor';\r\n\r\nexport const Sidebar = () => {\r\n    const { pokemonTypes } = useSelector<\r\n        { pokemonTypes: PokemonTypeState },\r\n        PokemonTypeState\r\n    >((state) => state.pokemonTypes);\r\n\r\n    const { type } = useSelector<\r\n        { pokemonTypeSelected: PokemonTypeSelectedState },\r\n        PokemonTypeSelectedState\r\n    >((state) => state.pokemonTypeSelected);\r\n\r\n    return (\r\n        <div className='px-3 py-3 w-56 hidden sm:flex shadow-xs overflow-y-auto sm:flex-col h-full'>\r\n            {pokemonTypes.map((pt, index) => (\r\n                <TypeButton\r\n                    key={pt.name}\r\n                    pt={pt}\r\n                    color={pokemonTypesColor[index].color}\r\n                    selected={type?.name === pt.name}\r\n                />\r\n            ))}\r\n        </div>\r\n    );\r\n};","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\r\n\r\ninterface ModalProps {\r\n    setToggle: Function;\r\n}\r\n\r\nexport const SearchModal = ({ setToggle }: ModalProps) => {\r\n    const handleClick = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n        setToggle(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div\r\n                className='fixed overflow-x-hidden overflow-y-auto inset-0 flex justify-center items-center z-50'\r\n                onClick={handleClick}\r\n            >\r\n                <div\r\n                    onClick={(e) => e.stopPropagation()}\r\n                    className='relative mx-auto w-auto max-w-xl bg-white p-4 rounded-md shadow-xl flex flex-col justify-between'\r\n                >\r\n                    <div className='w-full flex flex-row items-center rounded-sm border-2 border-green-600 text-lg py-1 px-2'>\r\n                        <FontAwesomeIcon icon={faSearch} size='1x' />\r\n                        <input\r\n                            className='w-full ml-4 focus:outline-none'\r\n                            type='text'\r\n                            autoComplete='off'\r\n                            placeholder='Search a Pokemon'\r\n                            autoFocus\r\n                        />\r\n                    </div>\r\n                    <div className='w-full mt-4'>\r\n                        Lorem ipsum dolor, sit amet consectetur adipisicing\r\n                        elit. Alias pariatur earum, laudantium aut voluptate\r\n                        dolore commodi. Explicabo nihil in necessitatibus cumque\r\n                        id molestiae magni accusamus omnis corrupti! Eveniet,\r\n                        soluta id.\r\n                    </div>\r\n                    <div></div>\r\n                </div>\r\n            </div>\r\n            <div className='absolute inset-0 z-40 opacity-25 bg-black h-screen w-screen'></div>\r\n        </>\r\n    );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\r\nimport { SearchModal } from './SearchModal';\r\n\r\nexport const Appbar = () => {\r\n    const [toggle, setToggle] = useState(false);\r\n\r\n    const handleClick = () => setToggle(!toggle);\r\n    return (\r\n        <div className='h-16 shadow-md flex flex-row justify-between px-12 items-center z-10'>\r\n            <div></div>\r\n            <div>\r\n                <div\r\n                    className='border border-gray-300 rounded-lg py-2 px-4 leading-normal flex-row flex items-center cursor-pointer bg-white shadow-md'\r\n                    onClick={handleClick}\r\n                >\r\n                    <FontAwesomeIcon icon={faSearch} size='1x' />\r\n                    <h4 className='ml-4 text-gray-500'>Search a Pokemon</h4>\r\n                </div>\r\n            </div>\r\n            <div></div>\r\n            {toggle && <SearchModal setToggle={setToggle} />}\r\n        </div>\r\n    );\r\n};\r\n","import React, { useEffect } from 'react';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport { HomeScreen } from '../components/home/HomeScreen';\r\nimport { Sidebar } from '../components/shared/Sidebar';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getTypesOfPokemons } from '../actions/pokemons';\r\nimport { Appbar } from '../components/shared/Appbar';\r\n\r\nexport const AppRoute = () => {\r\n    const dispatch = useDispatch();\r\n    const ui = useSelector((state: any) => state.ui);\r\n\r\n    //carga los tipos de pokemon\r\n    useEffect(() => {\r\n        dispatch(getTypesOfPokemons());\r\n    }, [dispatch]);\r\n\r\n    if (ui.loading) {\r\n        return <h1>Hola</h1>;\r\n    }\r\n\r\n    return (\r\n        <Router>\r\n            <div className='overflow-hidden w-screen h-screen'>\r\n                <Appbar />\r\n                <div className='flex flex-row h-full'>\r\n                    <Sidebar />\r\n                    <Switch>\r\n                        <Route exact path='/' component={HomeScreen} />\r\n                    </Switch>\r\n                </div>\r\n            </div>\r\n        </Router>\r\n    );\r\n};\r\n","import { types } from '../types/types';\r\nimport { Action } from '../interfaces/action';\r\n\r\nexport interface Iui {\r\n    loading: boolean;\r\n    msgError?: string;\r\n}\r\n\r\nconst initialState = {\r\n    loading: false,\r\n    msgError: null,\r\n};\r\n\r\nexport const uiReducer = (state = initialState, action: Action<Iui>) => {\r\n    switch (action.type) {\r\n        case types.uiSetError:\r\n            return {\r\n                ...state,\r\n                msgError: action.payload,\r\n            };\r\n        case types.uiRemoveError:\r\n            return {\r\n                ...state,\r\n                msgError: null,\r\n            };\r\n        case types.uiStartLoading:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n            };\r\n        case types.uiFinishLoading:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { Action } from '../interfaces/action';\r\nimport { types } from '../types/types';\r\nimport { IPokemonTypesResult, IPokemonTypes } from '../interfaces/pokemonTypes';\r\n\r\nexport interface PokemonTypeState {\r\n    pokemonTypes: IPokemonTypesResult[];\r\n}\r\n\r\nconst initialState: PokemonTypeState = {\r\n    pokemonTypes: [],\r\n};\r\n\r\nexport const pokemonTypesReducer = (\r\n    state = initialState,\r\n    action: Action<IPokemonTypes>\r\n): PokemonTypeState => {\r\n    switch (action.type) {\r\n        case types.pokemonGetTypes:\r\n            return {\r\n                ...state,\r\n                pokemonTypes: action.payload.results,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { Action } from '../interfaces/action';\r\nimport { types } from '../types/types';\r\nimport { IPokemonTypesResult } from '../interfaces/pokemonTypes';\r\n\r\nexport interface PokemonTypeSelectedState {\r\n    type?: IPokemonTypesResult;\r\n}\r\n\r\nconst initialState: PokemonTypeSelectedState = {};\r\n\r\nexport const pokemonTypeSelectedReducer = (\r\n    state = initialState,\r\n    action: Action<string>\r\n) => {\r\n    switch (action.type) {\r\n        case types.pokemonSelectedType:\r\n            return {\r\n                ...state,\r\n                type: action.payload\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { types } from '../types/types';\r\nimport { IPokemon } from '../interfaces/ipokemon';\r\nimport { Action } from '../interfaces/action';\r\n\r\nexport interface IPokemonState {\r\n    pokemons: IPokemon[];\r\n}\r\n\r\nconst initialState: IPokemonState = {\r\n    pokemons: [],\r\n};\r\n\r\nexport const pokemonReducer = (\r\n    state = initialState,\r\n    action: Action<IPokemon[]>\r\n): IPokemonState => {\r\n    switch (action.type) {\r\n        case types.pokemonGetByType:\r\n            return {\r\n                ...state,\r\n                pokemons: action.payload,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { createStore, combineReducers, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { uiReducer } from '../reducers/uiReducer';\r\nimport { pokemonTypesReducer } from '../reducers/pokemonTypesReducer';\r\nimport { pokemonTypeSelectedReducer } from '../reducers/pokemonTypeSelectedReducer';\r\nimport { pokemonReducer } from '../reducers/pokemonReducer';\r\n\r\n//esta declaracion es utilizada en typescript\r\ndeclare global {\r\n    interface Window {\r\n        __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\r\n    }\r\n}\r\n\r\n//configuracion para utilizar devtools y multiples middleware\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\n//Encargado de realizar la combinacion de todos los reducer que\r\n//se generar para administrar el estado de la app\r\nconst reducers = combineReducers({\r\n    ui: uiReducer,\r\n    pokemon: pokemonReducer,\r\n    pokemonTypes: pokemonTypesReducer,\r\n    pokemonTypeSelected: pokemonTypeSelectedReducer\r\n});\r\n\r\n//finalmente se crea el store\r\nexport const store = createStore(\r\n    reducers,\r\n    composeEnhancers(applyMiddleware(thunk))\r\n);\r\n","import React from 'react';\r\nimport { AppRoute } from './routes/AppRoute';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './store/store';\r\n\r\nexport const PokeApp = () => {\r\n    return (\r\n        <Provider store={store}>\r\n            <AppRoute />\r\n        </Provider>\r\n    );\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { PokeApp } from './PokeApp';\nimport './styles/base.css';\n\nReactDOM.render(<PokeApp />, document.getElementById('root'));\n"],"sourceRoot":""}